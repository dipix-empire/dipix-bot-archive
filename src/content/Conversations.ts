import { Message, MessageEmbed, TextChannel, Collection } from "discord.js"
import Conversation from "../Types/Conversation"
export default {
    newPlayer: (msg: Message) => new Conversation(msg.author, 
        '–í—ã –Ω–∞—á–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É DiPix.\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–º–µ—á–µ–Ω—ã *. **–û—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã**',[
        '–í—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞? * ',
        '–í–∞—à –Ω–∏–∫ –≤ –ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç? * ',
        '–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç? * ',
        '–í–∞—à –∫–ª–∏–µ–Ω—Ç (Java, Bedrock, –û–±–∞)? * ',
        '–ë–∏–æ–≥—Ä–∞—Ñ–∏—è –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?',
        '–ß—Ç–æ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –¥–µ–ª–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ?',
        '–ö—Ç–æ –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª / –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥?',
        '–í–∞—à –ø–æ–ª?'
    ], (answers: Collection<string, string>) => {
        msg.channel.send(`–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –æ—Ç <@!${msg.author.id}>`).then(startMsg => {
            let chnl: TextChannel
            if (msg.channel instanceof (TextChannel)) chnl = msg.channel as TextChannel
            else return
            chnl.threads.create({
                startMessage: startMsg,
                name: `–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç –∏–≥—Ä–æ–∫–∞ ${msg.author.tag}`,
                autoArchiveDuration: 1440
            }).then(thread => {
                let embed = new MessageEmbed()
                    .setTitle('–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏')
                answers.each((val, key) => {
                    embed.addField(key, val, true)
                })
                thread.send({embeds: [embed]}).then(msg => msg.pin())
                thread.send(
                    //TODO: UNCOMMENT IN PRODUCTION!!!
                    //`–ù–∞ –∑–∞—è–≤–∫—É –æ—Ç–≤–µ—á–∞–µ—Ç: <@&${process.env.ADMIN_ROLE_ID}>\n`+
                    `:white_check_mark: - –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É
                    :x: - –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É 
                    :grey_question: - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å
                    :mailbox: - –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–∞–∫—É—é –∂–µ –∑–∞—è–≤–∫—É
                `).then(msg => {
                    msg.pin()
                    msg.react('‚úÖ').then(()=>msg.react('‚ùå')).then(()=>msg.react('‚ùî')).then(()=>msg.react('üì´'))
                    const filter = (reaction: any, user: any) => {
                        return ['‚úÖ', '‚ùå', '‚ùî','üì´'].includes(reaction.emoji.name) && !user.bot;
                    };
                    msg.awaitReactions({ filter, max: 4, time: 60000, errors: ['time'] })
                        .then(collected => {
                            collected.forEach(reaction => {
                                switch (reaction?.emoji?.name) {
                                    case '‚úÖ':
                                        console.log('reaction 1')
                                        break
                                    case '‚ùå': 
                                        console.log('reaction 2')
                                        break
                                    case '‚ùî':
                                        console.log('reaction 3')
                                        break
                                    case 'üì´':
                                        console.log('reaction 4')
                                        break
                                }
                            })
                            
                        });
                })
            })
        })
    }, (step: number, text: string) => {
        switch(step) {
            case 0:
                return !(['–¥–∞', 'yes', 'y', '–¥'].indexOf(text.toLowerCase()) === -1)
            case 2:
                let pattern2 = /^[1-9]\d*|0$/
                return (pattern2.test(text))
            case 3:
                return !(['java','bedrock','–¥–∂–∞–≤–∞','–±–µ–¥—Ä–æ–∫','–æ–±–∞'].indexOf(text.toLowerCase()) === -1)
            default:
                return true 
        }
    })
}